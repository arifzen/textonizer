#LyX 1.6.0 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Advanced Graphics Project
\end_layout

\begin_layout Author
Chen Goldberg
\begin_inset Foot
status open

\begin_layout Plain Layout
ID: 039571161, E-mail: chengold@tau.ac.IL
\end_layout

\end_inset

, Eran Cohen
\begin_inset Foot
status open

\begin_layout Plain Layout
ID: 038175436, E-mail: erancoh1@tau.ac.IL
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In this project we deal with texture synthesis.
 We are given an image of a texture, and we would like to synthesize a new
 image in the same size or bigger than the original image.
 These textures are non-stochastic where texture elements can be separated
 
\begin_inset Quotes eld
\end_inset

easily
\begin_inset Quotes erd
\end_inset

.
 We call these elements 
\begin_inset Quotes eld
\end_inset

textons
\begin_inset Quotes erd
\end_inset

.
 A texton is a fundamental micro-structure in an image.
\end_layout

\begin_layout Standard
In the first part of this project the goal is to have an algorithm that
 extract textons from a given image.
 After extracting the textons, the algorithm should cluster the textons
 to sets such that similar textons should be included in the same set.
 Our algorithm should decide how many sets should be.
 It is up to us to decide and implement how to cluster the textons and how
 they are shaped.
 The input is a color image of a texture.
 The output should be images of discriminative representatives of each set.
\end_layout

\begin_layout Standard
The second part of the project deals with synthesizing a texture from the
 textons obtained in the first part.
 The target texture should appear as if it was generated from the same model
 used to create the original image.
 Our goal here is find this hidden texton distribution model
\begin_inset Foot
status open

\begin_layout Plain Layout
We only implicitly address the separation of this part to two steps of synthesis
 (i.e.
 uniform distribution and model distribution) as was specified in the exercise.
 
\end_layout

\end_inset

 and use it to synthesize a new texture which complies to it.
\end_layout

\begin_layout Standard
The texture synthesis system we implemented for this task is explain in
 this document.
 The synthesis results we achieve are pleasing for some textures (more stochasti
c) and disappointing for others (usually regular).
 Many of the methods we use are heuristics that rely on common sense and
 intuition.
 Nonetheless we don't require any user interaction during the procedure,
 and usually the default set of parameters proves sufficiant.
\end_layout

\begin_layout Standard
In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Texton-extraction"

\end_inset

 we deal with the problem of extracting textons from a texture image.
 We discuss the problem, provide a solution for it and show some results.
 Next in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Image-synthesis"

\end_inset

 we discuss the problem of texture synthesis and how we attempt to solve
 it by first generating a new texton structure and then drawing an image
 that complies with it.
 Then in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Implementation"

\end_inset

 we discuss the implementation issues, in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Results"

\end_inset

 we show final results and in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Conclusion"

\end_inset

 we give our final conclusions from this project.
\end_layout

\begin_layout Section
Texton extraction
\begin_inset CommandInset label
LatexCommand label
name "sec:Texton-extraction"

\end_inset


\end_layout

\begin_layout Standard
In the literature there are many works that deal with the fundamental components
 of an image or a texture.
 Some nomenclatures include texture particles, and some textons.
 In this work we refer to these image components as 
\series bold
semantic textons
\series default
.
 that is a texton we find should have some semantic value for a layman.
 Examples for such textons can be: an egg, a rock, bird or a buttercup.
 We also use semantic textons to differentiate it from the texton term used
 in paper such as 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 which refer to the more visual components of an image (e.g.
 lines, dots, curves).
 To avoid confusion we call these 
\series bold
visual textons
\series default
.
\end_layout

\begin_layout Standard
The basis on which we built our texton extracting method is the clustering
 of visual textons as described in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

: The input image is filtered using a filter bank made of Gabor filters
 in numerous scales and orientations.
 The result is a feature space descriptor for each pixel, in which each
 feature reveals information about the surrounding of the original pixel.
 We then use conventional dimension reduction methods such as PCA to lower
 the dimensionality of the feature space
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"

\end_inset

.
 We then add for each pixel its color information and again perform PCA.
 
\end_layout

\begin_layout Standard
We then perform K-means clustering on the new feature space and relate each
 pixel to one of the 
\begin_inset Formula $k$
\end_inset

 clusters.
 Each of these pixel clusters stands for a visual texton which is called
 a texton channel, and together they combine a texton map of the original
 image.
 
\end_layout

\begin_layout Subsection
Channel partitioning
\end_layout

\begin_layout Standard
The intuition behind this factorization, is that each texton channel is
 made out of a group of pixels whose surrounding area behaves the same,
 thus making them appear as a non-stochastic texture.
 If we take this intuitive explanation seriously, then we might believe
 that a texton channel is actually a connected group of the semantic textons
 we sought finding.
 All we are left then is to find some way of breaking apart each texton
 channel to visually separated regions.
 
\end_layout

\begin_layout Standard
Given a texton map of the input image, we work on each texton channel separately.
 We partition each texton channel to visual elements by applying a standard
 binary edge detection on it.
 We then attempt to find connected components (i.e.
 pixel regions) in the texton channel which aren't separated by the edge
 map.
\end_layout

\begin_layout Standard
We then throw the connected components that have very small size in pixels.
 The resulting connected set of pixels is considered a single texton and
 it along with information about its location and class are stored in memory
 for later use in the second part.
\end_layout

\begin_layout Subsection
Results
\end_layout

\begin_layout Standard
Sample results of the texton extraction methods can be seen in figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:eranolives"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:eraneggs"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:eranrust"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:eranpaint"

\end_inset

.
 It is evident that the channel partitioning works well with non rectangular
 complicated textures as seen in Figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:eranolives"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:eraneggs"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:eranrust"

\end_inset

, and fails in cases when the texture changes in distribution, as seen in
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:eranpaint"

\end_inset

.
 
\end_layout

\begin_layout Standard
The method however does poor job in cases where objects are clearly separated
 from background like with the birds and synthetic images.
 This happens because the Gabor filters are too large to sport each texture
 particle on it's own, and instead captures them as a single texton.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/eran/olives.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:eranolives"

\end_inset

Textons extracted from the Olives image using Channel partitioning method.
 Each row of images stands for a single texton class, and results are sorted
 by quality from left to right.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/eran/eggs.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:eraneggs"

\end_inset

Textons extracted from the Eggs image using Channel partitioning method
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/eran/rustspots.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:eranrust"

\end_inset

Textons extracted from the Rust image using Channel partitioning method
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/eran/paintpeel.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:eranpaint"

\end_inset

Textons extracted from the Paint peel image using Channel partitioning method.
 You can see that the method completely missed the peel pattern.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Discussion
\end_layout

\begin_layout Standard
In practice, the visual texton analysis step fails to capture whole texture
 areas which make a single semantic texton.
 The most obvious case is the one dealing with texton borders: Consider
 our texton to be a stone, then the stone's body is usually textured uniformly,
 thus mapped to a single texton channel.
 However, the borders of such a texton are mapped to different texton channels,
 which means that a method such as the 
\begin_inset Quotes eld
\end_inset

Channel partitioning
\begin_inset Quotes erd
\end_inset

 method would overlook the stone being a texton in its entire, and instead
 relate the border and filling to different semantic textons.
 
\end_layout

\begin_layout Standard
Furthermore, it is incorrect to assume that the stone's inner region will
 be mapped to a single texton channel.
 When the number of texton channels is set too high, even a relatively uniform
 texture pattern such as the stone's inner region will be separated into
 different visual textons.
 Thus, the 
\begin_inset Quotes eld
\end_inset

Channel partitioning
\begin_inset Quotes erd
\end_inset

 method is very sensitive to the number of visual textons.
 Moreover, A uniform mapping of an entire texton will only occur when each
 pixel inside the texton has roughly the same feature distribution.
 This happens when the entire texton behaves similarly to some of the filters.
 For example, an egg texton will be captured as a whole by this method,
 since an eggs behaves much like a Gabor filter at a certain scale and orientati
on.
 Another example is color separation: with the lack of any significance
 from the filter bank feature, the only information put into use is the
 color values, and thus a segmentation according to colors is performed.
\end_layout

\begin_layout Section
Texture synthesis
\begin_inset CommandInset label
LatexCommand label
name "sec:Image-synthesis"

\end_inset


\end_layout

\begin_layout Standard
In this section we describe our methods for combining the extracted textons
 into a new texture image.
 Our image synthesis procedure uses only image data of the textons that
 were extracted in the first part of this exercise.
 Formally, the input for this module is a list of masked texton images,
 each given with the location in the original image it was extracted from,
 and it's associated texton channel index.
 The output is an incomplete image consisting of only textons and areas
 of empty canvas.
 The empty areas are filled in a separate hole-filling procedure.
\end_layout

\begin_layout Standard
The resulting image should appear as if it was created using the same hidden
 model used to produce the source image.
 While there are many existing methods for synthesizing textures from example,
 our solution would have to be special due to the limitation of having to
 rely solely on texton information.
 This means that unlike many popular texture synthesis algorithms we are
 not allowed to access the original image data directly.
 
\end_layout

\begin_layout Standard
Our approach in this work is to apply common texture synthesis techniques
 on the texton data instead of the actual image data, thus generating the
 texton information of the target image.
 We then use this texton information to assist in the process of synthesizing
 the actual image
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Refer the a flow graph
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
We are motivated by significant works in texture synthesis which don't necessari
ly rely on texton information.
 One such algorithm is 
\begin_inset Quotes eld
\end_inset

Image quilting
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

 by Efros and Freeman which achieves excellent results on a variety of textures,
 both stochastic and regular.
 The algorithm itself is rather simple and very elegant: The target image
 is traverses in a scan-line order one overlapping block at a time, and
 an optimal candidate block from the source image that minimizes the overlapping
 error is obtained at each iteration.
 The optimal block is then 
\begin_inset Quotes eld
\end_inset

quilted
\begin_inset Quotes erd
\end_inset

 into the target image by copying over an optimal seam at each overlapping
 end.
 
\end_layout

\begin_layout Standard
We use a variation of 
\begin_inset Quotes eld
\end_inset

image quilting
\begin_inset Quotes erd
\end_inset

 to synthesize a texton map of the target texture, which we describe in
 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sub:Texton-map-quilting"

\end_inset

.
 In addition to synthesizing a coherent texton map we also wish it would
 maintain the texton distribution of the original texton map.
 We explain our distribution analysis and synthesis stage on 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sub:Texton-distribution-analysis"

\end_inset

.
 In 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sub:Texture-synthesis"

\end_inset

 we show how we take the synthesized texton map and use it for the actual
 texture synthesis, and in 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sub:Hole-filling"

\end_inset

 we handle any empty pixel data left unknown.
\end_layout

\begin_layout Subsection
Texton map synthesis
\begin_inset CommandInset label
LatexCommand label
name "sub:Texton-map-synthesis"

\end_inset


\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sec:Texton-extraction"

\end_inset

 about texton extraction we say that each pixel of the input image is associated
 with a single texton, and every texton is associated with a single texton
 channel, and that a combination of these texton channels constitutes a
 
\emph on
texton map
\emph default
 of the source image.
 A texton map is therefore a two dimensional matrix of indices
\begin_inset Formula $1,\ldots,k$
\end_inset

 where 
\begin_inset Formula $k$
\end_inset

 is the number of texton channels.
 
\end_layout

\begin_layout Standard
Our goal is then to take the texton map of the source image and create a
 texton map of the target image.
 Our hypothesis is that the texton map of an image reveals much of the underlyin
g structure behind it (see for instance 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "fig:dist-paint-peel"

\end_inset

) and by synthesizing a new texton map we offer a general blueprint of a
 good target texture.
 
\end_layout

\begin_layout Standard
Handling a texton map instead of actual image data actually simplifies the
 problem of synthesis, making it more robust to errors and artifacts, and
 greatly reduces the complexity of the model.
 On the downside however, this requires the texton extraction process to
 be very accurate, which is something rarely achieved.
 However in theory, if we had textons that are semantic, then it would make
 perfect sense to place around semantic objects in such way that preserves
 the spatial relations they had in the source image.
\end_layout

\begin_layout Subsubsection
Texton distribution analysis
\begin_inset CommandInset label
LatexCommand label
name "sub:Texton-distribution-analysis"

\end_inset


\end_layout

\begin_layout Standard
In this section we discuss our method for synthesizing a distribution map.
 A distribution map is a two dimensional matrix of indices (
\begin_inset Formula $1,\ldots,k$
\end_inset

) which encodes the distribution of each one of the 
\begin_inset Formula $k$
\end_inset

 texton channels.
 This is a simple way for representing a distribution by samples, instead
 of the formal way of using a model (e.g.
 a combination of Gaussians).
 For example, the distribution map of the source texton map is the texton
 map itself.
\end_layout

\begin_layout Standard
Many works in texture synthesis consider textures as samples from probabilistic
 distributions.
 By determining the form of these distributions and sampling from them,
 new textures that are similar to the originals can, in principle, be generated
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"

\end_inset

.
 For example, uniformly sampling pixel values from the source texton map
 would create a new texton map that maintains the same distribution frequency
 of the texton classes but loses all spatial structure.
 A localized approach will be successful in maintaining structure.
\end_layout

\begin_layout Standard
Informally, we seek to generate a new distribution map which behaves like
 the original distribution, but is different at large.
 One general way of making big changes without losing much significant informati
on is by making big changes in low frequency and small changes in high frequency.
 This way the error is less noticeable.
 
\end_layout

\begin_layout Standard
This idea motivated us to develop a heuristic method for manipulating the
 distribution (see 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "alg:The-image-permutation"

\end_inset

): First we take the source distribution map (i.e.
 the texton map) and tile it cover the entire target image size.
 Then, we recursively swap both image halves along a given dimension with
 probability 
\begin_inset Formula $\nicefrac{1}{2}$
\end_inset

.
 We repeat this process alternatively on each dimension (horizontal and
 vertical) until the given image is too small to split.
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout LyX-Code

\series bold
function
\series default
 permImage(img, dim)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
    if
\series default
 img too small to split then return img
\end_layout

\begin_layout LyX-Code
    
\series bold
else 
\series default
split img to half along dimension
\end_layout

\begin_layout LyX-Code
    T[0] = permImage(first image half, 
\family typewriter
\series bold
NOT
\family default
\series default
 dim)
\end_layout

\begin_layout LyX-Code
    T[1] = permImage(second image half, 
\series bold
NOT
\series default
 dim)
\end_layout

\begin_layout LyX-Code
    randomBit = random > 0.5 
\end_layout

\begin_layout LyX-Code
    
\series bold
return
\series default
 concatination of T[randomBit 
\series bold
XOR
\series default
 0] and T[randomBit 
\series bold
XOR
\series default
 1]
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:The-image-permutation"

\end_inset

The image permutation algorithm.
 Initially started with the complete image and a random dimension.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The idea is then to move large areas over large distances so to minimize
 the consistency error.
 For example, in the first step we split the image into two parts and swap
 them.
 Then the consistency error will be very high along the split seam, but
 all other pixels will stay consistent, and at each step the consistency
 error diminishes because the swapping distance is exponential getting shorter.
\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand prettyref
reference "fig:dist-paint-peel"

\end_inset

 shows a distribution map generated using this process.
 The global distribution of textons of both source and target maps is identical
 (although visually we might perceive otherwise), and some density patterns
 from the original clearly appear in the target.
 
\end_layout

\begin_layout Standard
One apparent shortcoming of the algorithm is that it makes the map more
 sparse and less condense than it originally was.
 Although this implies the model is inaccurate, one should keep in mind
 that the quilting processes doesn't rely on density map alone and that
 slight noise in the model isn't too significant.
 An example of this is shown in 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "fig:dist-peel-equalweights"

\end_inset

 where the texton map is created by also using the spatial similarity discussed
 in the following subsection.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement p
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/figures/textonMap2955.png
	BoundingBox 20bp 50bp 940bp 430bp

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:dist-paint-peel"

\end_inset

On the left there is the texton map of 
\begin_inset Quotes eld
\end_inset

paint peel
\begin_inset Quotes erd
\end_inset

 image.
 The target texton map was generated by solely relying on distribution affinity
 during the quilting process (i.e.
 spatial affinity was given zero weight).
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
placement p
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/figures/textonMap8367.png
	BoundingBox 20bp 50bp 940bp 430bp

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:dist-peel-equalweights"

\end_inset

On the left there is the texton map of 
\begin_inset Quotes eld
\end_inset

paint peel
\begin_inset Quotes erd
\end_inset

 image like in 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "fig:dist-paint-peel"

\end_inset

.
 Here the target texton map was generated by using equal weights for both
 distribution and spatial energy functions.
 The result appears less sparse and inherits more of the patterns of the
 source image.
 However it comes in a price of sacrificing consistency with distribution
 map and thus the distribution in the resulting texton map is slightly different
 than that of the original.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Texton map quilting
\begin_inset CommandInset label
LatexCommand label
name "sub:Texton-map-quilting"

\end_inset


\end_layout

\begin_layout Standard
The texton map quilting is performed much like the texture quilting procedure
 briefly discussed above.
 The block size used is determined automatically using a heuristic based
 on empirical experiments.
 We traverse the target texton map one overlapping block at a time and search
 nearest neighbor blocks in the source map for both spatial similarity and
 density similarity.
\end_layout

\begin_layout Standard
We define the texton class density of each block to be the histogram of
 texton classes within it.
 When reaching a new block, we calculate it's goal density in the target
 distribution map.
 This density is then compared against every single density in the source
 map using a 
\begin_inset Formula $\chi^{2}$
\end_inset

 distance measure.
 An energy function for class density 
\begin_inset Formula $E_{frequency}$
\end_inset

 is then constructed by dividing the minimum distance with all other distances.
\end_layout

\begin_layout Standard
Similarly we construct a spatial energy function 
\begin_inset Formula $E_{spatial}$
\end_inset

 by calculating distances between block pixels.
 The distance function used to compare two blocks is obviously not SSD like
 commonly used with textures, but instead measures the number of element-wise
 non-matching indices.
\end_layout

\begin_layout Standard
Finally we linearly combine the two energy functions 
\begin_inset Formula \[
E_{block}=W_{spatial}\cdot E_{spatial}+W_{frequency}\cdot E_{frequency}\]

\end_inset

and select the block having peak value along with few other blocks significantly
 close to it as candidates.
 From these we randomly select a single block to be embedded in the current
 location.
\end_layout

\begin_layout Standard
Embedding the block is performed similarly to 
\begin_inset Quotes eld
\end_inset

image quilting
\begin_inset Quotes erd
\end_inset

.
 That is we find along both overlapping ends of the block (e.g.
 up and left) a seam which minimizes the overlap error created by taking
 the absolute difference between the two overlapping blocks.
 The result is an almost seamless embedding of the block which would otherwise
 create very crude and noticeable artifacts along the overlapping regions.
 
\end_layout

\begin_layout Subsection
Texture generation
\begin_inset CommandInset label
LatexCommand label
name "sub:Texture-synthesis"

\end_inset


\end_layout

\begin_layout Standard
Having already a synthesized a target texton map, we are left with the task
 of completing it with image data.
 In this section we describe our heuristic procedure for doing this.
 Obviously this is a very hard task involving myriad dependencies and very
 high computational requirements.
 This task is even hard for a humans to solve (imagine assembling a 1,000
 pieces puzzle without having access to the goal picture on the box cover).
 
\end_layout

\begin_layout Standard
Therefore we propose an iterative greedy algorithm which given a texton
 attempts to find an optimal location for it on the canvas.
 Once a location is chosen the texton is drawn there and status there permanentl
y until the algorithm halts.
 Formally, we iteratively select a candidate texton and calculate various
 energy maps for it, then we combine them to find the optimal location for
 the texton.
 We do this over multiple scales, going from coarse to fine resolutions.
\end_layout

\begin_layout Standard
Each iteration requires us to select a texton whose addition to the canvas
 would be the most beneficial.
 However computing the optimal energy for each texton at every iteration
 is very expensive.
 Instead we try to predict which textons will make good candidates to add
 to the contemporary canvas.
 We discuss this process of prediction and texton selection in 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sub:Texton-selection"

\end_inset

.
 Finding the optimal location for placing the selected texton and embedding
 it there is discussed in 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sub:Texton-drawing"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Texton selection
\begin_inset CommandInset label
LatexCommand label
name "sub:Texton-selection"

\end_inset


\end_layout

\begin_layout Standard
Texton selection is performed heuristically by calculating custom energy
 functions for each texton and selecting the textons most likely to fit
 nicely in the canvas.
 When the the combined energy vector 
\begin_inset Formula $E_{textons}$
\end_inset

 is all zeros the texture synthesis process halts.
 The energy functions we defined express simple rules that we thought are
 elementary in the prior selection of textons (e.g.
 selecting large textons first, not repeatedly selecting the same texton,
 ...).
\end_layout

\begin_layout Standard
The following lists the texton properties:
\end_layout

\begin_layout Description
Size It is useful to select textons by the size, largest to smallest.
 Large textons are useful for orientation of other smaller textons, and
 selecting them earlier also reduces the amount of collisions.
 
\begin_inset Formula $E_{size}$
\end_inset

 thus expresses the size of the texton in pixels.
\end_layout

\begin_layout Description
Limit Since the target texton map is constructed by permutating the pixels
 of the source texton map, then each pixel in the target texton map is associate
d with a single texton.
 Since target maps can be larger than source map, it is possible that a
 texton would appear multiple times in the map.
 Therefore, a crude estimation for a limit for every texton is calculated:
\begin_inset Formula \[
E_{limit}=\mbox{Number of times added}-\left\lceil \frac{\mbox{Number of pixels in target}}{\mbox{Number of texton pixels}}\right\rceil \]

\end_inset


\end_layout

\begin_layout Description
Class
\begin_inset space ~
\end_inset

distribution It is also useful to add textons from multiple texton classes
 so that the class distribution at any given moment is roughly the same
 as the target's.
 Therefore a histogram of texton already drawn to the canvas is calculated,
 and the class distribution energy is used to boost texton belonging to
 a less represented class in relation to the target distribution:
\begin_inset Formula \[
E_{class}=1-\frac{\mbox{Canvas texton histogram}}{\mbox{Target texton histogram}}\]

\end_inset


\end_layout

\begin_layout Description
Variation Whenever a texton is added to the canvas its counter is incremented.
 We already make sure that it's counter won't reach beyond the limit.
 But this alone won't prevent the same texton from being selected repeatedly.
 The variation energy function makes sure this won't happen by considerably
 downscaling added textons, making them unlikely to be chosen until everyone
 else is selected at least that many times.
\begin_inset Formula \[
E_{variation}=e^{-10\cdot\mbox{Texton counter}}\]

\end_inset


\end_layout

\begin_layout Standard
Finally the combined energy function takes the form
\begin_inset Formula \[
E_{textons}=E_{size}\cdot E_{limit}\cdot E_{class}\cdot E_{variation}\]

\end_inset

and textons with highest energy will be selected as candidates for the next
 phase.
\end_layout

\begin_layout Subsubsection
Texton embedding 
\begin_inset CommandInset label
LatexCommand label
name "sub:Texton-drawing"

\end_inset


\end_layout

\begin_layout Standard
Given a small set of candidate textons, we need to find a location on the
 canvas where the textons fit best.
 Among all candidates only the one with the best fit is ultimately added
 to the canvas.
 Again we define 5 properties of a good fit and provide each with an energy
 functions that attempts to evaluate it.
 These properties are:
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/ref.bmp
	BoundingBox 0bp 0bp 536bp 268bp

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Reference-maps-of"

\end_inset

Reference maps of the stones texture after a resize of 
\begin_inset Formula $\times2$
\end_inset

.
 Each texton is depicted with a unique color.
 After synthesis the textons appear to maintain similar spatial relations
 to each other.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Area An inverse of the texton mask is taken and extracted from the source
 image.
 The result is a rectangular hollow border-like image which shows the surroundin
g of the texton.
 The surrounding area of a texton is useful for properly stitching the texton
 in an area it belongs to.
 We compute 
\begin_inset Formula $E_{area}$
\end_inset

 by measuring SSD for every location in the canvas.
 
\end_layout

\begin_layout Description
Texton
\begin_inset space ~
\end_inset

map In order to maintain the texture structure we want to draw the texton
 on pixels that were designated to its class in the synthesized texton map.
 We compute 
\begin_inset Formula $E_{texton}$
\end_inset

 by measuring how much the texton mask correlates with the texton map in
 every position.
\end_layout

\begin_layout Description
Reference When we quilt the texton map we keep track of which texton is
 drawn where (see 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "fig:Reference-maps-of"

\end_inset

).
 This means that each pixel in the target texton map is associated with
 a texton.
 We compute 
\begin_inset Formula $E_{reference}$
\end_inset

 by convolving the texton mask with the its expression in the reference
 map.
\end_layout

\begin_layout Description
Distance We wish the texton to overwrite as little existing canvas pixels
 as possible.
 The distance energy function 
\begin_inset Formula $E_{distance}$
\end_inset

 measures the number of empty pixels under the texton in every location
 of the canvas.
 
\end_layout

\begin_layout Description
Crude
\begin_inset space ~
\end_inset

image If a low resolution version of the texture exists then we use it to
 assist us in finding a position for the candidate texton.
 
\begin_inset Formula $E_{crude}$
\end_inset

 is computed by convolving the texton with this crude image.
\end_layout

\begin_layout Standard
Each of these energy function produces a value between zero and one.
 The energy functions are finally combined
\begin_inset Formula \[
E_{location}=\left(W_{area}\cdot E_{area}+W_{texton}\cdot E_{texton}+W_{crude}\cdot E_{crude}+W_{reference}\cdot E_{reference}\right)\cdot E_{distance}^{2}\]

\end_inset

and the optimal location and candidate texton are selected.
 The texton is then added to the canvas at that location overwriting any
 existing pixels without using any special blending techniques (feathering,
 transparency...).
\end_layout

\begin_layout Subsection
Hole-filling
\begin_inset CommandInset label
LatexCommand label
name "sub:Hole-filling"

\end_inset


\end_layout

\begin_layout Standard
The image resulting from the texton embedding phase is still incomplete
 having some empty pixel.
 Hole-filling in an image is the process for seamlessly filling the holes
 with image data.
 one with many algorithms in the literature.
 We use a method inspired by
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"

\end_inset

 which uses Poisson completion to produce a smooth low frequency completion
 of the unknown values.
 This is useful as a very crude estimation of the missing texture data.
\end_layout

\begin_layout Standard
We then traverse the canvas in a scan-line order and replace every unknown
 value with the most similar block in the original texture image.
 This use of the source image is minor as usually the holes are small enough
 for the Poisson completion to provide a good enough estimation (and sometimes
 even better).
 
\end_layout

\begin_layout Section
Implementation
\begin_inset CommandInset label
LatexCommand label
name "sec:Implementation"

\end_inset


\end_layout

\begin_layout Standard
The implementation of these methods was done in Matlab version 2008b.
 We used libraries found on the Internet which are included in the distribution
 accompanying this document, along with some standard Matlab toolbars which
 weren't, such as the Image processing toolbox and statistics toolbox.
 Usage of the system is straightforward.
 The following Matlab instructions, for example, would synthesize a new
 
\begin_inset Quotes eld
\end_inset

brick
\begin_inset Quotes erd
\end_inset

 texture of size 
\begin_inset Formula $500\times500$
\end_inset

 using the default parameter configuration:
\end_layout

\begin_layout LyX-Code
install;
\end_layout

\begin_layout LyX-Code
newImg = textonSynth(loadImage('brick.PNG'), [500,500], getDefaultConfig());
\end_layout

\begin_layout Standard
The configuration variable is optional as the default parameter values are
 usually satisfying.
 Refer to 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "tab:Parameters"

\end_inset

 for a complete list of all input parameters used in our system and the
 default values we attribute to them.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="3">
<features>
<column alignment="left" valignment="middle" width="0">
<column alignment="left" valignment="top" width="1.8in">
<column alignment="center" valignment="middle" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.textonizer.visual.texton_clusters
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of texton classes extracted from the input image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.textonizer.visual.fb.orientations
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of orientations of Gabor filters used
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\nicefrac{\pi}{6}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.textonizer.visual.fb.scales
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of scales of Gabor filters used
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.textonizer.visual.filter_dim
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of dimensions reduction after Gabor filters
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.textonizer.visual.color_features
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type of color features used (rgb or ntsc)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ntsc
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.textonizer.visual.final_pca
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The addition of a final PCA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
true
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.textonizer.semantic.min_texton_area
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minimal texton size allowed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.synthesizer.map.quilt.weights.spatial
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weight given to the spatial energy function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.synthesizer.map.quilt.weights.frequency
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weight given to the frequency (density) energy function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.synthesizer.scales
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of scales of 
\begin_inset Quotes eld
\end_inset

crude to fine
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\left[0.75,1\right]$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.synthesizer.candidates_max
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of candidate textons per iteration.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.synthesizer.weights.area
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weight given to area energy function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.synthesizer.weights.texton
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weight given to texton map energy function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.synthesizer.weights.crude
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weight given to 
\begin_inset Quotes eld
\end_inset

crude to fine
\begin_inset Quotes erd
\end_inset

 energy function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.25
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
config.synthesizer.weights.ref
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weight given to reference energy function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Parameters"

\end_inset

A complete list of all parameters used in our system.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Results
\begin_inset CommandInset label
LatexCommand label
name "sec:Results"

\end_inset


\end_layout

\begin_layout Standard
We included some of the better and worse results we obtained using our implement
ation (figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:first-res"

\end_inset

-
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:last-res"

\end_inset

).
 We only used the textures provided with the exerisice so we could compare
 our results with other groups.
 These results were all obtained using the same default parameter configuration
 for all textures (see 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "tab:Parameters"

\end_inset

 for default values used) and a target size of 
\begin_inset Formula $\times2$
\end_inset

.
 All textures were synthesized in matter of few hours.
 We did
\end_layout

\begin_layout Standard
Each figure consists of the original image on the left and a larger synthesized
 image on the right.
 Due to the document's space constraint some of the images were scaled down.
 The real-size original images are located in the accompanying CD under
 the directory 
\begin_inset Quotes eld
\end_inset

data
\backslash
outputs
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
The CD also has all of the results we obtain using the algorithm under the
 directory 
\begin_inset Quotes eld
\end_inset

data
\backslash
experiments
\begin_inset Quotes erd
\end_inset

.
 The 
\begin_inset Quotes eld
\end_inset

configurations
\begin_inset Quotes erd
\end_inset

 folder contains Matlab configuration files of each experiment, and the
 
\begin_inset Quotes eld
\end_inset

results
\begin_inset Quotes erd
\end_inset

 folder contains each experiment's final and intermediate output data.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement p
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/moss.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/moss.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:first-res"

\end_inset

Moss
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/flowers.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/flowers.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Flowers"

\end_inset

Flowers
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/brick.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/brick.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Brick"

\end_inset

Brick
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/fabric.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/fabric.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Fabric"

\end_inset

Fabric
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/lava.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/lava.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Lava"

\end_inset

Lava
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/wetsand.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/wetsand.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Wet-sand"

\end_inset

Wet sand
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/olives.PNG

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/olives.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Olives"

\end_inset

Olives
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/paintpeel.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/paintpeel.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Paint-peel"

\end_inset

Paint peel
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/Cantera1.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/Cantera1.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Cantera-1"

\end_inset

Cantera (1)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/Cantera2.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/Cantera2.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Cantera-2"

\end_inset

Cantera (2)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/birds.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/birds.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Birds"

\end_inset

Birds
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/fossil.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/fossil.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Fossil
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/stone.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/stone.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Stone"

\end_inset

Stone
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/eggs.PNG

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/eggs.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Eggs"

\end_inset

Eggs
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../data/inputs/stones.PNG
	width 33line%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename ../../data/experiments/results/batch-13/output/stones.png
	width 66line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:last-res"

\end_inset

Stones
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion
\begin_inset CommandInset label
LatexCommand label
name "sec:Conclusion"

\end_inset


\end_layout

\begin_layout Standard
The problem of texton extraction is a hard and ill-posed.
 The question 
\begin_inset Quotes eld
\end_inset

what is a texton?
\begin_inset Quotes erd
\end_inset

 was raised many times during the making of this part of project, and it
 was always answered satisfyingly.
 At least we hoped that the synthesis step would somehow be robust enough
 to overcome the crudeness of the texton selection process.
 However it is now obvious that this is not the case, and that bad textons
 lead to bad texture synthesis (e.g Figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Birds"

\end_inset

,
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fabric"

\end_inset

).
\end_layout

\begin_layout Standard
Unfortunately, this isn't the only thing that leads to bad texture synthesis.
 Color gradients are almost impossible to tackle using the texton decomposition
 (e.g.
 Figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Birds"

\end_inset

,
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Stone"

\end_inset

) since the continuous transition makes the texton classes too general with
 high variability.
 Textons originating from image edges is also a very noticeable flaw in
 many synthesizes (e.g.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Cantera-2"

\end_inset

,
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Eggs"

\end_inset

,
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Paint-peel"

\end_inset

,
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wet-sand"

\end_inset

), although this is probably treatable by extending the edges with mirroring
 or something like it.
 
\end_layout

\begin_layout Standard
However these errors mostly occur in the texture generation process.
 The texture distribution is something else completely.
 Our impression from the empirical results is that more often than not the
 structure of the synthesized texture is a very reasonable extension of
 the original image.
 This is remarkable considering we haven't relied on specific distribution
 models or any assumptions about the texture.
 In fact our approach for texton structure synthesis was almost parameter-free.
\end_layout

\begin_layout Standard
In conclusion, although it is commonly believed that textons don't contribute
 much to texture synthesis, and that pixel and patch based methods give
 much better results, we showed that texton information can be successfully
 used for effective structure generation.
 Although the visual results are sometimes poor in comparison to other methods,
 the similar underlying distribution and low pattern repetitiveness of the
 texton based method is something most definitely worthy of future work.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "1"
key "key-1"

\end_inset

Textons, Contours and Regions: Cue Integration in Image Segmentation / Jitendra
 Malik, Serge Belongie, Jianbo Shi and Thomas Leung IEE International Conference
 on Computer Vision 1999
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "2"
key "key-1"

\end_inset

Appearance-space texture synthesis .S.
 Lefebvre, H.
 Hoppe .ACM Transactions on Graphics (Proc.
 SIGGRAPH 2006), 25(3), 541-548
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "3"
key "key-3"

\end_inset

.Drori, I., Cohen-Or, D., and Yeshurun, H.
 2003.
 Fragment-based image completion.
 ACM Trans.
 Graph.
 22, 3 (Jul.
 2003), 303-312.
 DOI= http://doi.acm.org/10.1145/882262.882267 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "4"
key "key-2"

\end_inset

Efros, A.
 A.
 and Freeman, W.
 T.
 2001.
 Image quilting for texture synthesis and transfer.
 In Proceedings of the 28th Annual Conference on Computer Graphics and interacti
ve Techniques SIGGRAPH '01.
 ACM, New York, NY, 341-346.
 DOI= http://doi.acm.org/10.1145/383259.383296 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "5"
key "key-4"

\end_inset

De Bonet, J.
 S.
 1997.
 Multiresolution sampling procedure for analysis and synthesis of texture
 images.
 In Proceedings of the 24th Annual Conference on Computer Graphics and interacti
ve Techniques International Conference on Computer Graphics and Interactive
 Techniques.
 ACM Press/Addison-Wesley Publishing Co., New York, NY, 361-368.
 DOI= http://doi.acm.org/10.1145/258734.258882 
\end_layout

\end_body
\end_document
